head(cr)
source("test.R")
res
source("test.R")
source("test.R")
ot
CLASS(OT)
class(ot)
source("test.R")
ot
source("test.R")
ot
source("test.R")
ot
source("corr.R")
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
res
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
?print
corr("specdata", 150)
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("submitscript.R")
submit
submit
submit()
submit()
submit()
source("corr.R")
corr("specdata", 2000)
submit()
corr("specdata", 2000)
c = corr("specdata", 2000)
c
class(c)
source("corr.R")
source("corr.R")
source("corr.R")
c = corr("specdata", 2000)
class(c)
submit()
matrix(1:2)
matrix(1:2,1:2)
matrix(1:4,1:2)
matrix(1:4 1:2)
matrix(1:4, 1:2)
matrix(1:4, 1:4)
matrix(c(1:4, 1:4)
)
mat <- matrix(1:4)
mat <- matrix(1:4, 2)
mat
mat <- matrix(1:20, 5)
mat
mat <- matrix(1:25, 5)
mat
solve(mat)
solve(mat)
?solve
class(mat)
x <- matrix(1:25, 5)
solve(x)
x <- matrix(1:16, 4)
solve(x)
View(mat)
View(mat)
view(mat)
View(mat)
solve(x)
class(x)
x <- matrix(1:16, 4, 4)
x
class(matrix)
class(x)
solve(x)
x <- matrix(1:16, 4, 4)
x <- matrix(1:16, 4, 4)
x
x[1,2]
x[1,4]
x[3,4]
solve(x)
matrix
matrix(c(5,6,2,3), 2, 2)
x <- matrix(c(5,6,2,3), 2, 2)
solve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
if (is.na(CacheMatrix))
{
CacheMatrix <<- x
InverseMatrix <<- NA
}
cacheSolve(x)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
if (is.na(InverseMatrix) || (CacheMatrix != x))
{
InverseMatrix <<- solve(x)
CacheMatrix <<- x
}
## Return a matrix that is the inverse of 'x'
InverseMatrix
}
x
makeCacheMatrix(x)
source()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
retMatrix <- NA
if (!exists("CacheMatrix"))
{
CacheMatrix <<- NA
InverseMatrix <<- NA
}
if (CacheMatrix != x)
{
InverseMatrix <<- NA
retMatrix <- cacheSolve(x)
}
InverseMatrix
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
if (is.na(InverseMatrix) || (CacheMatrix != x))
{
InverseMatrix <<- solve(x)
CacheMatrix <<- x
}
## Return a matrix that is the inverse of 'x'
InverseMatrix
}
makeCacheMatrix(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
retMatrix <- NA
if (!exists("CacheMatrix"))
{
CacheMatrix <<- x
InverseMatrix <<- cacheSolve(x)
}
else if (CacheMatrix != x)
{
InverseMatrix <<- NA
InverseMatrix <- cacheSolve(x)
}
InverseMatrix
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
if (is.na(InverseMatrix) || (CacheMatrix != x))
{
InverseMatrix <<- solve(x)
CacheMatrix <<- x
}
## Return a matrix that is the inverse of 'x'
InverseMatrix
}
makeCacheMatrix(x)
debug(makeCacheMatrix)
makeCacheMatrix(x)
x
retmatrix
retMatrix
!exists("CacheMatrix")
exists("CacheMatrix")
CacheMatrix
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
retMatrix <- NA
if (!exists("CacheMatrix") || is.na(CacheMatrix))
{
CacheMatrix <<- x
InverseMatrix <<- cacheSolve(x)
}
else if (CacheMatrix != x)
{
InverseMatrix <<- NA
retMatrix <- cacheSolve(x)
}
InverseMatrix
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
if (is.na(InverseMatrix) || (CacheMatrix != x))
{
InverseMatrix <<- solve(x)
CacheMatrix <<- x
}
## Return a matrix that is the inverse of 'x'
InverseMatrix
}
makeCacheMatrix(x)
makeCacheMatrix(x)
debug(makeCacheMatrix)
makeCacheMatrix(x)
exists("CacheMatrix")
CacheMatrix
(CacheMatrix != x)
x <- matrix(c(5,6,4,1), 2, 2)
debug(makeCacheMatrix)
makeCacheMatrix(x)
(CacheMatrix != x)
InverseMatrix
CacheMatrix
debug(makeCacheMatrix)
makeCacheMatrix(x)
debug(makeCacheMatrix)
debug(cacheSolve)
debug(makeCacheMatrix)
makeCacheMatrix(x)
debug(makeCacheMatrix)
debug(cacheSolve)
makeCacheMatrix(x)
(CacheMatrix != x)
(CacheMatrix == x)
x <- matrix(c(3,2,4,1), 2, 2)
debug(cacheSolve)
debug(makeCacheMatrix)
makeCacheMatrix(x)
(CacheMatrix != x)
is.na(InverseMatrix)
InverseMatrix
InverseMatrix
CacheMatrix
CacheMatrix
InverseMatrix
all(CacheMatrix == x)
all(CacheMatrix != x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
retMatrix <- NA
if (!exists("CacheMatrix") || is.na(CacheMatrix))
{
CacheMatrix <<- x
InverseMatrix <<- cacheSolve(x)
}
else if (all(CacheMatrix != x))
{
InverseMatrix <<- NA
retMatrix <- cacheSolve(x)
}
InverseMatrix
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
if (is.na(InverseMatrix) || (all(CacheMatrix != x))
{
InverseMatrix <<- solve(x)
CacheMatrix <<- x
}
## Return a matrix that is the inverse of 'x'
InverseMatrix
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
retMatrix <- NA
if (!exists("CacheMatrix") || is.na(CacheMatrix))
{
CacheMatrix <<- x
InverseMatrix <<- cacheSolve(x)
}
else if (all(CacheMatrix != x))
{
InverseMatrix <<- NA
retMatrix <- cacheSolve(x)
}
InverseMatrix
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
if (is.na(InverseMatrix) || (all(CacheMatrix != x)))
{
InverseMatrix <<- solve(x)
CacheMatrix <<- x
}
## Return a matrix that is the inverse of 'x'
InverseMatrix
}
debug(makeCacheMatrix)
makeCacheMatrix(x)
makeCacheMatrix(x)
x <- matrix(c(3,6,4,1), 2, 2)
makeCacheMatrix(x)
all(CacheMatrix != x
)
CacheMatrix
x
CacheMatrix != x
all(CacheMatrix == x)
all(CacheMatrix != x)
identical(CacheMatrix, x)
all.equal(CacheMatrix, x)
all.equal(CacheMatrix, x) == TRUE
identical(CacheMatrix, x)
## the functions below intially create the Cache matrix if it does not exist
## and if it does, it checks to see if the inverse can be pulled from memory
## This function first checks if the matrix exists in memory and then
## if it is equal to the matrix being supplied. If it is supplies the
## inverse from memory
makeCacheMatrix <- function(x = matrix()) {
## First check if the variable exists in memory. If not, intialize it with the
## inout matrix and calculate the Inverse
if (!exists("CacheMatrix") || is.na(CacheMatrix))
{
CacheMatrix <<- x
InverseMatrix <<- cacheSolve(x)
}
## If the variable exists and is not NA, then check for equality
## If not, then send it down to solve
else if (identical(CacheMatrix, x))
{
InverseMatrix <<- NA
retMatrix <- cacheSolve(x)
}
InverseMatrix
}
## This function provides the inverse of the matrix provided.
## It checks if the inout provided is already in the cache and
## if not re-calculates it
cacheSolve <- function(x, ...) {
if (is.na(InverseMatrix) || (identical(CacheMatrix, x))
{
InverseMatrix <<- solve(x)
CacheMatrix <<- x
}
## Return a matrix that is the inverse of 'x'
InverseMatrix
}
## the functions below intially create the Cache matrix if it does not exist
## and if it does, it checks to see if the inverse can be pulled from memory
## This function first checks if the matrix exists in memory and then
## if it is equal to the matrix being supplied. If it is supplies the
## inverse from memory
makeCacheMatrix <- function(x = matrix()) {
## First check if the variable exists in memory. If not, intialize it with the
## inout matrix and calculate the Inverse
if (!exists("CacheMatrix") || is.na(CacheMatrix))
{
CacheMatrix <<- x
InverseMatrix <<- cacheSolve(x)
}
## If the variable exists and is not NA, then check for equality
## If not, then send it down to solve
else if (identical(CacheMatrix, x))
{
InverseMatrix <<- NA
retMatrix <- cacheSolve(x)
}
InverseMatrix
}
## This function provides the inverse of the matrix provided.
## It checks if the inout provided is already in the cache and
## if not re-calculates it
cacheSolve <- function(x, ...) {
if (is.na(InverseMatrix) || (identical(CacheMatrix, x)))
{
InverseMatrix <<- solve(x)
CacheMatrix <<- x
}
## Return a matrix that is the inverse of 'x'
InverseMatrix
}
x <- matrix(c(3,6,4,1), 2, 2)
CacheMatrix
x
indentical(CacheMatrix,x)
identical(CacheMatrix,x)
makeCacheMatrix(x)
debug(makeCacheMatrix)
makeCacheMatrix(x)
## the functions below intially create the Cache matrix if it does not exist
## and if it does, it checks to see if the inverse can be pulled from memory
## This function first checks if the matrix exists in memory and then
## if it is equal to the matrix being supplied. If it is supplies the
## inverse from memory
makeCacheMatrix <- function(x = matrix()) {
## First check if the variable exists in memory. If not, intialize it with the
## inout matrix and calculate the Inverse
if (!exists("CacheMatrix") || is.na(CacheMatrix))
{
CacheMatrix <<- x
InverseMatrix <<- cacheSolve(x)
}
## If the variable exists and is not NA, then check for equality
## If not, then send it down to solve
else if (identical(CacheMatrix, x) == FALSE)
{
InverseMatrix <<- NA
retMatrix <- cacheSolve(x)
}
InverseMatrix
}
## This function provides the inverse of the matrix provided.
## It checks if the inout provided is already in the cache and
## if not re-calculates it
cacheSolve <- function(x, ...) {
if (is.na(InverseMatrix) || (identical(CacheMatrix, x) == FALSE))
{
InverseMatrix <<- solve(x)
CacheMatrix <<- x
}
## Return a matrix that is the inverse of 'x'
InverseMatrix
}
debug(makeCacheMatrix)
makeCacheMatrix(x)
(identical(CacheMatrix, x) == FALSE)
identical(CacheMatrix, x)
x
CacheMatrix
x <- matrix(c(3,6,4,0), 2, 2)
CacheMatrix
x
makeCacheMatrix(x)
View(CacheMatrix)
CleanEnvir <- function(pattern = "CacheMatrix"){
rm(list = ls(envir=globalenv())[
grep("tmp", ls(envir=globalenv()))], envir = globalenv())
}
CleanEnvir
CleanEnvir()
debug(makeCacheMatrix)
## the functions below intially create the Cache matrix if it does not exist
## and if it does, it checks to see if the inverse can be pulled from memory
## This function first checks if the matrix exists in memory and then
## if it is equal to the matrix being supplied. If it is supplies the
## inverse from memory
makeCacheMatrix <- function(x = matrix()) {
## First check if the variable exists in memory. If not, intialize it with the
## inout matrix and calculate the Inverse
if (!exists("CacheMatrix") || is.na(CacheMatrix))
{
CacheMatrix <<- x
InverseMatrix <<- cacheSolve(x)
}
## If the variable exists and is not NA, then check for equality
## If not, then send it down to solve
else if (identical(CacheMatrix, x) == FALSE)
{
InverseMatrix <<- NA
retMatrix <- cacheSolve(x)
}
InverseMatrix
}
## This function provides the inverse of the matrix provided.
## It checks if the inout provided is already in the cache and
## if not re-calculates it
cacheSolve <- function(x, ...) {
if (is.na(InverseMatrix) || (identical(CacheMatrix, x) == FALSE))
{
InverseMatrix <<- solve(x)
CacheMatrix <<- x
}
## Return a matrix that is the inverse of 'x'
InverseMatrix
}
debug(makeCacheMatrix)
makeCacheMatrix(x)
x <- matrix(c(3,6,4,0), 2, 2)
debug(makeCacheMatrix)
makeCacheMatrix(x)
source('F:\Coursera\ProgrammingAssignment2\cachematrix.R')
source('F:\Coursera\ProgrammingAssignment2\cachematrix.R')
setwd('F:\Coursera\ProgrammingAssignment2')
getwd
getwd()
setwd('F:/Coursera/ProgrammingAssignment2')
source('cachematrix.R')
debug(makeCacheMatrix)
x <- matrix(c(3,6,4,0), 2, 2)
makeCacheMatrix(x)
x <- matrix(c(3,6,4,1), 2, 2)
debug(makeCacheMatrix)
makeCacheMatrix(x)
n
